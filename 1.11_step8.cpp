/*Однажды, разбирая старые книги на чердаке, школьник Вася нашёл англо-латинский словарь.
Английский он к тому времени знал в совершенстве, и его мечтой было изучить латынь.
Поэтому попавшийся словарь был как раз кстати.
К сожалению, для полноценного изучения языка недостаточно только одного словаря:
кроме англо-латинского необходим латинско-английский. За неимением лучшего он решил сделать второй словарь из первого.

Как известно, словарь состоит из переводимых слов, к каждому из которых приводится несколько слов-переводов.
Для каждого латинского слова, встречающегося где-либо в словаре, Вася предлагает найти все его переводы
(то есть все английские слова, для которых наше латинское встречалось в его списке переводов),
и считать их и только их переводами этого латинского слова.

Помогите Васе выполнить работу по созданию латинско-английского словаря из англо-латинского.

Входные данные:
В первой строке содержится единственное целое число N — количество английских слов в словаре.
Далее следует N описаний. Каждое описание содержится в отдельной строке, в которой записано сначала английское слово,
затем отделённый пробелами дефис (символ номер 45), затем разделённые запятыми с пробелами переводы этого английского
слова на латинский. Переводы отсортированы в лексикографическом порядке. Порядок следования английских слов в
словаре также лексикографический.

Все слова состоят только из маленьких латинских букв, длина каждого слова не превосходит 15 символов.
Общее количество слов на входе не превышает 100000.

Выходные данные:
В первой строке программа должна вывести количество слов в соответствующем данному латинско-английском словаре.
Со второй строки выведите сам словарь, в точности соблюдая формат входных данных. В частности, первым должен идти
перевод лексикографически минимального латинского слова, далее — второго в этом порядке и т.д.
Внутри перевода английские слова должны быть также отсортированы лексикографически.

Sample Input:
3
apple - malum, pomum, popula
fruit - baca, bacca, popum
punishment - malum, multa

Sample Output:
7
baca - fruit
bacca - fruit
malum - apple, punishment
multa - punishment
pomum - apple
popula - apple
popum - fruit*/

#include <iostream>
#include <map>
#include <vector>
#include <algorithm>

using namespace std;

int main()
{
	int N;
	cin >> N;
	cin.ignore();

	// Создаем словарь для хранения информации из англо-латинского словаря
	map<string, vector<string>> eng_to_lat_dict;

	// Считываем и обрабатываем описания слов
	for (int i = 0; i < N; ++i)
	{
		string description;
		getline(cin, description);

		size_t dashPos = description.find(" - ");
		string eng_word = description.substr(0, dashPos);
		string lat_words_str = description.substr(dashPos + 3);

		size_t commaPos;
		while ((commaPos = lat_words_str.find(", ")) != string::npos)
		{
			string lat_word = lat_words_str.substr(0, commaPos);
			lat_words_str = lat_words_str.substr(commaPos + 2);
			eng_to_lat_dict[lat_word].push_back(eng_word);
		}
		eng_to_lat_dict[lat_words_str].push_back(eng_word);
	}

	// Выводим количество слов в латинско-английском словаре
	cout << eng_to_lat_dict.size() << endl;

	// Выводим латинско-английский словарь
	for (const auto &entry : eng_to_lat_dict)
	{
		string lat_word = entry.first;
		vector<string> eng_words = entry.second;
		sort(eng_words.begin(), eng_words.end()); // Сортируем английские слова внутри перевода
		cout << lat_word << " - ";
		for (int i = 0; i < eng_words.size(); ++i)
		{
			cout << eng_words[i];
			if (i < eng_words.size() - 1)
			{
				cout << ", ";
			}
		}
		cout << endl;
	}
	return 0;
}